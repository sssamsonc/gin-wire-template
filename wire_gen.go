// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gin-wire-template/configs/common_config"
	"gin-wire-template/configs/mongo_db_config"
	"gin-wire-template/configs/mysql_db_config"
	"gin-wire-template/configs/redis_config"
	"gin-wire-template/controllers"
	"gin-wire-template/controllers/text_menu_controller"
	"gin-wire-template/databases/mongo_database"
	"gin-wire-template/databases/mysql_database"
	"gin-wire-template/databases/redis_cache"
	"gin-wire-template/repositories/text_menu_repository"
	"gin-wire-template/utils/log_util"
	"go.uber.org/zap"
)

import (
	_ "gin-wire-template/docs"
	_ "github.com/joho/godotenv/autoload"
)

// Injectors from wire.go:

func InitApiControllers() (*controllers.Controllers, error) {
	config := common_config.NewConfig()
	mongo_db_configConfig, err := mongo_db_config.NewConfig()
	if err != nil {
		return nil, err
	}
	connector, err := mongo_database.NewConnector(mongo_db_configConfig, config)
	if err != nil {
		return nil, err
	}
	mysql_db_configConfig, err := mysql_db_config.NewConfig()
	if err != nil {
		return nil, err
	}
	mysql_databaseConnector, err := mysql_database.NewConnector(mysql_db_configConfig, config)
	if err != nil {
		return nil, err
	}
	redis_configConfig, err := redis_config.NewConfig()
	if err != nil {
		return nil, err
	}
	redis_cacheConnector, err := redis_cache.NewConnector(redis_configConfig, config)
	if err != nil {
		return nil, err
	}
	repository := text_menu_repository.NewRepository(config, connector, mysql_databaseConnector, redis_configConfig, redis_cacheConnector)
	controller := text_menu_controller.NewController(repository)
	controllersControllers := controllers.NewControllers(controller)
	return controllersControllers, nil
}

func InitLog() *zap.Logger {
	config := common_config.NewConfig()
	logger := log_util.NewLogger(config)
	return logger
}
